name : CI/CD

on:
  push:
    branches:
      - config/github-actions
    pull_request:
      branches:
        - main

jobs:
  build-and-test-spring:
    name: Build and Test Spring Boot
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Build Spring Boot application
        run: |
          chmod +x gradlew
          ./gradlew clean build -x test

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: spring-boot-jar
          path: build/libs/*.jar

  build-and-push-docker-image:
    name: Build and Push Docker Image
    needs: build-and-test-spring # Spring Boot 빌드 Job이 성공해야 실행
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/config/github-actions' # main 브랜치 푸시에만 실행

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: spring-boot-jar
          path: . # 현재 디렉토리로 다운로드

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }} # GitHub Secrets에 저장
          password: ${{ secrets.DOCKER_HUB_TOKEN }} # GitHub Secrets에 저장 (Personal Access Token 권장)

      - name: Get current date for image tag
        id: date
        run: echo "::set-output name=date::$(date +'%Y%m%d%H%M%S')"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ongst52/giantmall:latest
            ongst52/giantmall:${{ steps.date.outputs.date }}
            

  deploy-to-server:
    name: Deploy to Remote Server
    needs: build-and-push-docker-image
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/config/github-actions'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: SSH to remote server and deploy
        uses: appleboy/ssh-action@v1.0.1 # SSH 접속을 위한 GitHub Action
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }} # 개인 키 (PEM 형식)
          script: |
            echo "Connecting to remote server and deploying..."
            # 서버의 프로젝트 경로로 이동
            cd /path/to/your/project/on/server
            
            # Docker Compose 파일이 최신인지 확인 (Git pull 또는 scp로 복사)
            git pull origin main # 또는 scp로 docker-compose.yml 파일 전송
            
            # Docker 이미지 업데이트 및 서비스 재시작
            # 이 부분은 docker-compose.yml 내용에 따라 달라질 수 있습니다.
            # docker-compose.yml 파일 내에 이미지 태그를 latest로 사용하는 경우:
            docker-compose pull # 최신 이미지 다운로드
            docker-compose down # 기존 서비스 중단
            docker-compose up -d --build # --build를 사용하면 Dockerfile 변경 사항도 반영
            
            # 또는 특정 태그를 사용하고 docker-compose.yml을 동적으로 업데이트해야 하는 경우:
            # sed -i "s|your-dockerhub-username/your-spring-app-name:.*|your-dockerhub-username/your-spring-app-name:${{ steps.build-and-push-docker-image.outputs.date }}|" docker-compose.yml
            # docker-compose up -d
            
            echo "Deployment completed successfully!"
